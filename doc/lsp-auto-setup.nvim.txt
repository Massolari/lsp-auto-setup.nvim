*lsp-auto-setup.nvim.txt*      For NVIM v0.8.0      Last change: 2025 March 12

==============================================================================
Table of Contents                      *lsp-auto-setup.nvim-table-of-contents*

1. LSP Auto Setup                         |lsp-auto-setup.nvim-lsp-auto-setup|
  - Features                     |lsp-auto-setup.nvim-lsp-auto-setup-features|
  - Requirements             |lsp-auto-setup.nvim-lsp-auto-setup-requirements|
  - Installation             |lsp-auto-setup.nvim-lsp-auto-setup-installation|
  - Usage                           |lsp-auto-setup.nvim-lsp-auto-setup-usage|
  - How It Works             |lsp-auto-setup.nvim-lsp-auto-setup-how-it-works|
  - Global configuration|lsp-auto-setup.nvim-lsp-auto-setup-global-configuration|

==============================================================================
1. LSP Auto Setup                         *lsp-auto-setup.nvim-lsp-auto-setup*

A Neovim plugin that automatically sets up language servers based on available
executables.

With this plugin you don’t need to manually configure each language server in
your `init.vim` or `init.lua`. It will automatically detect and set up servers
based on the executables available on your system.


FEATURES                         *lsp-auto-setup.nvim-lsp-auto-setup-features*

- Automatically detects and configures LSP servers based on available executables
- Allows custom configuration for each server
- Provides options to exclude specific servers


REQUIREMENTS                 *lsp-auto-setup.nvim-lsp-auto-setup-requirements*

- Neovim >= 0.8.0
- nvim-lspconfig <https://github.com/neovim/nvim-lspconfig>


INSTALLATION                 *lsp-auto-setup.nvim-lsp-auto-setup-installation*


USING LAZY.NVIM ~

>lua
    {
      "Massolari/lsp-auto-setup.nvim",
      dependencies = { "neovim/nvim-lspconfig" },
      config = true
    }
<


USAGE                               *lsp-auto-setup.nvim-lsp-auto-setup-usage*

The plugin provides a simple setup function that can be customized with
options:

>lua
    require("lsp-auto-setup").setup({
      -- Options here
    })
<


DEFAULT CONFIGURATION ~

With no options provided, the plugin will:

1. Scan all available language server configurations from `nvim-lspconfig`
2. Check if each server’s executable is available on your system
3. Automatically set up servers that are found
4. Skip deprecated servers


CONFIGURATION OPTIONS ~

>lua
    require("lsp-auto-setup").setup({
      -- Table of server-specific configuration functions
      server_config = {
        -- Example: Add custom settings for specific servers
        lua_ls = function(default_config)
          return {
            settings = {
              Lua = {
                diagnostics = {
                  globals = { "vim" }
                }
              }
            }
          }
        },
        -- Add other servers as needed
        -- pyright = function(default_config)
        --   return { ... }
        -- end
      },
      
      -- List of server names to exclude from auto-setup
      exclude = { "tsserver", "rust_analyzer" }
    })
<


HOW IT WORKS                 *lsp-auto-setup.nvim-lsp-auto-setup-how-it-works*

The plugin: 1. Locates the `nvim-lspconfig` installation in your runtime path
2. Scans all available language server configurations 3. For each server, it
checks if its executable is available on your system 4. If found, it sets up
the server with your custom configuration or the default configuration


GLOBAL CONFIGURATION *lsp-auto-setup.nvim-lsp-auto-setup-global-configuration*

If you want to set global configuration for all servers (like `capabilities` or
`on_attach`), `nvim-lspconfig` already provides a way to do that:

>lua
     local lspconfig = require'lspconfig'
     lspconfig.util.default_config = vim.tbl_extend(
       "force",
       lspconfig.util.default_config,
       {
         autostart = false,
         handlers = {
           ["window/logMessage"] = function(err, method, params, client_id)
               if params and params.type <= vim.lsp.protocol.MessageType.Log then
                 vim.lsp.handlers["window/logMessage"](err, method, params, client_id)
               end
             end,
           ["window/showMessage"] = function(err, method, params, client_id)
               if params and params.type <= vim.lsp.protocol.MessageType.Warning.Error then
                 vim.lsp.handlers["window/showMessage"](err, method, params, client_id)
               end
             end,
         }
       }
     )
<

This is documented on `:help lspconfig-global-defaults`
<https://github.com/neovim/nvim-lspconfig/blob/8a1529e46eef5efc86c34c8d9bdd313abc2ecba0/doc/lspconfig.txt#L124>

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
